// src/services/__mocks__/openAiGCodeService.ts
import { 
  GCodeAnalysisResult, 
  GCodeOptimizationResult,
  GCodeCompletion 
} from '@/src/hooks/useGCodeAI';
import { getMockCompletions } from '@/src/components/ai/GCodeAIAgent/__mocks__/autocompletions';

// Mock implementation of the OpenAI GCode service for testing
const openAiGCodeService = {
  /**
   * Generate G-code from a text description
   */
  generateGCode: async (
    prompt: string,
    options: {
      temperature?: number;
      machineType?: 'fanuc' | 'heidenhain' | 'siemens' | 'haas' | 'generic';
    } = {}
  ): Promise<string> => {
    // Mock implementation - returns a simple GCode example based on the prompt
    const mockResponses: Record<string, string> = {
      'circle': `G90 G94
G17
G0 X0 Y0 Z10
G0 Z2
G1 Z-1 F100
G2 X0 Y0 I10 J0 F200
G1 Z10 F1000
M2`,
      'square': `G90 G94
G17
G0 X0 Y0 Z10
G0 Z2
G1 Z-1 F100
G1 X20 F200
G1 Y20
G1 X0
G1 Y0
G1 Z10 F1000
M2`,
      'default': `G90 G94
G17
G0 X0 Y0 Z10
G0 Z2
G1 Z-1 F100
G1 X10 Y10 F200
G1 Z10 F1000
M2`
    };
    
    // Simple keyword matching for demo purposes
    for (const [keyword, code] of Object.entries(mockResponses)) {
      if (prompt.toLowerCase().includes(keyword)) {
        return code;
      }
    }
    
    return mockResponses.default;
  },

  /**
   * Optimize existing G-code for efficiency or quality
   */
  optimizeGCode: async (
    gcode: string,
    options: {
      optimizationType?: 'speed' | 'quality' | 'balanced';
      machineType?: 'fanuc' | 'heidenhain' | 'siemens' | 'haas' | 'generic';
    } = {}
  ): Promise<GCodeOptimizationResult> => {
    // Mock implementation - "optimizes" by adding a few comments and removing some spaces
    const originalLines = gcode.split('\n');
    const optimizedCode = `; Optimized for ${options.optimizationType || 'balanced'}
; Generated by GCode AI Agent
${gcode.replace(/\s+/g, ' ')}
; End of optimized code`;
    
    const optimizedLines = optimizedCode.split('\n');
    
    return {
      code: optimizedCode,
      improvements: [
        'Removed unnecessary whitespace',
        'Added clarifying comments',
        `Optimized for ${options.optimizationType || 'balanced'} performance`
      ],
      stats: {
        originalLines: originalLines.length,
        optimizedLines: optimizedLines.length,
        reductionPercent: Math.round((1 - (optimizedLines.length / originalLines.length)) * 100),
        estimatedTimeReduction: 0.5
      }
    };
  },

  /**
   * Analyze G-code for issues or improvements
   */
  analyzeGCode: async (
    gcode: string
  ): Promise<GCodeAnalysisResult> => {
    // Mock implementation - basic analysis with some dummy issues
    const lines = gcode.split('\n');
    
    const issues = [
      {
        severity: 'warning' as const,
        description: 'Missing safety height before rapid movement',
        lineNumbers: [2]
      }
    ];
    
    // Add some issues based on content
    if (!gcode.includes('M2') && !gcode.includes('M30')) {
      issues.push({
        severity: 'warning' as const,
        description: 'Missing program end code (M2 or M30)',
        lineNumbers: [lines.length]
      });
    }
    
    if (gcode.includes('G0') && !gcode.includes('Z')) {
      issues.push({
        severity: 'critical' as const,
        description: 'Rapid movement without Z clearance',
        lineNumbers: [gcode.split('\n').findIndex(line => line.includes('G0'))]
      });
    }
    
    return {
      summary: `Analyzed ${lines.length} lines of G-code. Found ${issues.length} issues.`,
      issues
    };
  },

  /**
   * Get explanations for specific G-code
   */
  explainGCode: async (
    gcode: string
  ): Promise<string> => {
    // Mock implementation - simple explanation with markdown
    const lines = gcode.split('\n').filter(line => line.trim() !== '');
    
    let explanation = `# G-Code Explanation\n\nThis code contains ${lines.length} commands.\n\n`;
    
    if (gcode.includes('G0')) {
      explanation += '- **G0**: Rapid positioning moves\n';
    }
    
    if (gcode.includes('G1')) {
      explanation += '- **G1**: Linear interpolation (cutting moves)\n';
    }
    
    if (gcode.includes('G2') || gcode.includes('G3')) {
      explanation += '- **G2/G3**: Circular interpolation\n';
    }
    
    if (gcode.includes('M3') || gcode.includes('M4')) {
      explanation += '- **M3/M4**: Spindle control\n';
    }
    
    explanation += '\n## Line-by-Line Explanation\n\n';
    
    lines.forEach((line, index) => {
      if (line.trim().startsWith(';') || line.trim() === '') return;
      
      explanation += `**Line ${index + 1}**: \`${line.trim()}\`\n`;
      
      if (line.includes('G0')) {
        explanation += '- Rapid positioning move\n';
      } else if (line.includes('G1')) {
        explanation += '- Linear cutting move\n';
      } else if (line.includes('G2')) {
        explanation += '- Clockwise arc move\n';
      } else if (line.includes('G3')) {
        explanation += '- Counter-clockwise arc move\n';
      } else if (line.includes('M3')) {
        explanation += '- Start spindle clockwise\n';
      } else if (line.includes('M4')) {
        explanation += '- Start spindle counter-clockwise\n';
      } else if (line.includes('M5')) {
        explanation += '- Stop spindle\n';
      } else if (line.includes('M2') || line.includes('M30')) {
        explanation += '- End program\n';
      }
      
      explanation += '\n';
    });
    
    return explanation;
  },

  /**
   * Get completion suggestions for G-code
   */
  getGCodeCompletions: async (
    context: string,
    options: {
      limit?: number;
      cursorPosition?: number;
      recentCommands?: string[];
      mode?: 'normal' | 'gather' | 'agent';
    } = {}
  ): Promise<GCodeCompletion[]> => {
    // Use the mock completions
    let completions = getMockCompletions(context);
    
    // Limit the number of results if specified
    if (options.limit && completions.length > options.limit) {
      completions = completions.slice(0, options.limit);
    }
    
    // If in 'agent' mode, add more descriptive completions
    if (options.mode === 'agent') {
      completions = completions.map(completion => ({
        ...completion,
        description: completion.description + ' (Agent-enhanced)'
      }));
    }
    
    // Add recent commands if provided and relevant
    if (options.recentCommands?.length && context.match(/^[GM]$/)) {
      const recentCommandCompletions = options.recentCommands
        .filter(cmd => cmd.startsWith(context))
        .map(cmd => ({
          text: cmd,
          description: 'Recently used'
        }));
      
      completions = [...recentCommandCompletions, ...completions];
    }
    
    return completions;
  },

  /**
   * Send a chat message to the AI assistant and get a response
   */
  chatCompletion: async (
    messages: Array<{
      role: 'user' | 'assistant' | 'system';
      content: string;
    }>
  ): Promise<string> => {
    // Mock implementation - simple response based on the last message
    const lastMessage = messages[messages.length - 1];
    
    if (!lastMessage || lastMessage.role !== 'user') {
      return 'I don\'t understand. Please provide a clear message.';
    }
    
    const content = lastMessage.content.toLowerCase();
    
    if (content.includes('hello') || content.includes('hi')) {
      return 'Hello! I\'m the GCode AI Assistant. How can I help you with your GCode programming?';
    }
    
    if (content.includes('g0') || content.includes('g1')) {
      return 'G0 is used for rapid positioning movements, while G1 is used for linear cutting movements. G0 moves typically happen at the maximum speed of the machine, while G1 moves occur at the programmed feed rate.';
    }
    
    if (content.includes('feed') && content.includes('speed')) {
      return 'Feed rate is how fast the tool moves through the material, typically measured in mm/min or inches/min. Spindle speed is how fast the spindle rotates, measured in RPM (revolutions per minute). The ideal feed and speed depend on the material, tool, and desired finish.';
    }
    
    if (content.includes('help')) {
      return 'I can help you with GCode programming, CNC operations, toolpath optimization, and more. You can ask specific questions about commands, or use specialized tools like Analyze, Optimize, or Generate through the tabs.';
    }
    
    return 'I understand you\'re asking about GCode. Could you provide more details or specific questions about what you\'d like to know?';
  }
};

export default openAiGCodeService;